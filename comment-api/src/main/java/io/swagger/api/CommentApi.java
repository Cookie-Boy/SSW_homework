/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Comment;
import io.swagger.model.InlineResponse200;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-03-24T07:28:53.682475384Z[GMT]")
@Validated
public interface CommentApi {

    @Operation(summary = "Add a new comment", description = "Add a new comment", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception") })
    @RequestMapping(value = "/comment",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Comment> addComment(@Parameter(in = ParameterIn.HEADER, description = "Authorization token" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization
, @Parameter(in = ParameterIn.DEFAULT, description = "Create a new comment", required=true, schema=@Schema()) @Valid @RequestBody Comment body
);


    @Operation(summary = "Deletes a comment", description = "Delete a comment (if user is the author or has authorization)", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successful operation"),
        
        @ApiResponse(responseCode = "400", description = "Invalid comment value"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - user is not authorized to delete this comment"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found") })
    @RequestMapping(value = "/comment/{commentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteComment(@Parameter(in = ParameterIn.PATH, description = "Comment id to delete", required=true, schema=@Schema()) @PathVariable("commentId") Long commentId
, @Parameter(in = ParameterIn.HEADER, description = "Authorization token" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization
);


    @Operation(summary = "Get all comments", description = "Returns all comments with pagination support", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid parameters") })
    @RequestMapping(value = "/comment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getAllComments(@Parameter(in = ParameterIn.QUERY, description = "Page number (starts from 0)" ,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "page", required = false, defaultValue="0") Integer page
, @Parameter(in = ParameterIn.QUERY, description = "Number of items per page" ,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "size", required = false, defaultValue="20") Integer size
, @Parameter(in = ParameterIn.QUERY, description = "Sort field" ,schema=@Schema(allowableValues={ "raiting", "creationDate", "editDate" }
, defaultValue="creationDate")) @Valid @RequestParam(value = "sortBy", required = false, defaultValue="creationDate") String sortBy
, @Parameter(in = ParameterIn.QUERY, description = "Sort direction" ,schema=@Schema(allowableValues={ "asc", "desc" }
, defaultValue="desc")) @Valid @RequestParam(value = "sortDirection", required = false, defaultValue="desc") String sortDirection
);


    @Operation(summary = "Find comment by ID", description = "Returns a single comment", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found") })
    @RequestMapping(value = "/comment/{commentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Comment> getCommentById(@Parameter(in = ParameterIn.PATH, description = "ID of comment to return", required=true, schema=@Schema()) @PathVariable("commentId") Long commentId
);


    @Operation(summary = "Update comment by ID", description = "Update an existing comment by ID", tags={ "comment" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Comment.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden - user is not the author of the comment"),
        
        @ApiResponse(responseCode = "404", description = "Comment not found"),
        
        @ApiResponse(responseCode = "422", description = "Validation exception") })
    @RequestMapping(value = "/comment/{commentId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Comment> updateCommentById(@Parameter(in = ParameterIn.HEADER, description = "Authorization token" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization
, @Parameter(in = ParameterIn.PATH, description = "ID of comment to update", required=true, schema=@Schema()) @PathVariable("commentId") Long commentId
, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existent comment", required=true, schema=@Schema()) @Valid @RequestBody Comment body
);

}

